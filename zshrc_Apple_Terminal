# zsh support for Apple Terminal
# Ported from /etc/bashrc_Apple_Terminal

# Correctly display UTF-8 with combining characters.
setopt combiningchars

# Working Directory
#
# Tell the terminal about the current working directory at each prompt.

if [[ -z $INSIDE_EMACS ]]; then
    update_terminal_cwd() {
	# Identify the directory using a "file:" scheme URL, including
	# the host name to disambiguate local vs. remote paths.

	# Percent-encode the pathname.
	local url_path=''
	{
	    # Use LC_CTYPE=C to process text byte-by-byte. Ensure that
	    # LC_ALL isn't set, so it doesn't interfere.
	    local i ch hexch LC_CTYPE=C LC_ALL=
	    for ((i = 0; i < ${#PWD}; i++)); do
		ch="${PWD:${i}:1}"
		if [[ "$ch" =~ [/._~A-Za-z0-9-] ]]; then
		    url_path+="$ch"
		else
		    printf -v hexch "%02X" "'$ch"
		    # printf treats values greater than 127 as
		    # negative and pads with "FF", so truncate.
		    url_path+="%${hexch: -2:2}"
		fi
	    done
	}
	printf '\e]7;%s\a' "file://$HOST$url_path"
    }
    # zsh uses precmd instead of PROMPT_COMMAND.
    # TODO: Combine this with any existing precmd definition
    function precmd() {
	update_terminal_cwd
    }
fi


# Resume Support: Save/Restore Shell State
#
# Terminal assigns each terminal session a unique identifier and
# communicates it via the TERM_SESSION_ID environment variable so that
# programs running in a terminal can save/restore application-specific
# state when quitting and restarting Terminal with Resume enabled.
#
# The following code defines a shell save/restore mechanism. Users can
# add custom state by defining a shell_session_save_user_state function
# that writes restoration commands to the session file at exit. e.g.,
# to save a variable:
#
#   shell_session_save_user_state() { echo MY_VAR="'$MY_VAR'" >> "$SHELL_SESSION_FILE"; }
#
# During shell startup the session file is executed. Old files are
# periodically deleted.
#
# The default behavior arranges to save and restore the bash command
# history independently for each restored terminal session. It also
# merges commands into the global history for new sessions. Because
# of this it is recommended that you set HISTSIZE and HISTFILESIZE to
# larger values.
#
# You may disable this behavior and share a single history by setting
# SHELL_SESSION_HISTORY to 0. There are some common user customizations
# that arrange to share new commands among running shells by
# manipulating the history at each prompt, and they typically include
# 'shopt -s histappend'; therefore, if the histappend shell option is
# enabled, per-session history is disabled by default. You may
# explicitly enable it by setting SHELL_SESSION_HISTORY to 1.
#
# The implementation of per-session command histories in combination
# with a shared global command history is incompatible with the
# HISTTIMEFORMAT variable--the timestamps are applied inconsistently
# to different parts of the history; therefore, if HISTTIMEFORMAT is
# defined, per-session history is disabled by default.
#
# Note that this uses PROMPT_COMMAND to enable per-session history
# the first time for each new session. If you customize PROMPT_COMMAND
# be sure to include the previous value. e.g.,
#
#   PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND; }your_code_here"
#
# Otherwise, the per-session history won't take effect until the first
# restore.
#
# The save/restore mechanism is disabled if the following file exists:
#
#   ~/.bash_sessions_disable

if (((${SHELL_SESSION_DID_INIT:-0} == 0)) && [[ -n $TERM_SESSION_ID ]] && [[ ! -e "$HOME/.zsh_sessions_disable" ]]); then
    # Do not perform this setup more than once (which shouldn't occur
    # unless the user's startup scripts execute global ones, which
    # is normally redundant).
    SHELL_SESSION_DID_INIT=1

    # Set up the shession directory/file.
    SHELL_SESSION_DIR="$HOME/.zsh_sessions"
    SHELL_SESSION_FILE="$SHELL_SESSION_DIR/$TERM_SESSION_ID.session"
    mkdir -m 700 -p "$SHELL_SESSION_DIR"

    #
    # Restore previous session state.
    #

    if [[ -r "$SHELL_SESSION_FILE" ]]; then
	source "$SHELL_SESSION_FILE"
	rm "${SHELL_SESSION_FILE:?}"
    fi

    #
    # Note: Use absolute paths to invoke commands in the exit code and
    # anything else that runs after user starup files, because the
    # search path may have been modified.
    #

    #
    # Arrange for per-session shell command history.

    shell_session_history_allowed() {
	# Return whether per-session history should be enabled.

	# bb -- zsh does this significantly differently from bash,
	# just return no for now.
	# TODO: Add per-session history support
	return 1
    }

    # Omit all of the SHELL_SESSION_HISTORY stuff for now.

    #
    # Arrange to save session state when exiting the shell.
    #

    shell_session_save() {
	# Save the current state.
	if [[ -n $SHELL_SESSION_FILE ]]; then
	    printf 'Saving session...'
	    (umask 077; echo 'echo $restored session: "$(/bin/date -r '$(/bin/date +%s)')"' >| "$SHELL_SESSION_FILE")
	    typeset -f shell_session_save_user_state > /dev/null && shell_session_save_user_state
	    shell_session_history_allowed && shell_session_save_history
	    printf 'completed.\n'
	fi
    }

    # Delete old session files. (Not more than once a day.)
    SHELL_SESSION_TIMESTAMP_FILE="$SHELL_SESSION_DIR/_expiration_check_timestamp"
    shell_session_delete_expired() {
	if ( [[ ! -e "$SHELL_SESSION_TIMESTAMP_FILE" ]] || [[ -z "$(/usr/bin/find "$SHELL_SESSION_TIMESTAMP_FILE" -mtime -1d)" ]]); then
	    local expiration_lock_file="$SHELL_SESSION_DIR/_expiration_lockfile"
	    if /usr/bin/shlock -f "$expiration_lock_file" -p $$; then
		printf 'Deleting expired sessions...'
		local delete_count=$(/usr/bin/find "$SHELL_SESSION_DIR" -type f -mtime +2w -print -delete | /usr/bin/wc -l)
		(( delete_count > 0 )) && printf '%s completed.\n' $delete_count || printf 'none found.\n'
		(umask 077; /usr/bin/touch "$SHELL_SESSION_TIMESTAMP_FILE")
		/bin/rm "${expiration_lock_file:?}"
	    fi
	fi
    }

    # Update saved session state when exiting.
    shell_session_update() {
	shell_session_save && shell_session_delete_expired
    }
    trap shell_session_update EXIT
fi
